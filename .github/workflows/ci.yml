name: Unit testing

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
        - '1.23.3'
    env:
      GOLANGCI_LINT_VERSION: 1.62.2
      COCKROACHDB_VERSION: 24.1.1

    steps:
    - uses: actions/checkout@v4 # https://github.com/actions/checkout/releases

    - name: Set up Go environment
      uses: actions/setup-go@v5 # https://github.com/actions/setup-go/releases
      with:
        go-version: ${{ matrix.go }}

    - name: Install golangci-lint
      run: |
        wget -O /tmp/golangci-lint.deb https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VERSION}/golangci-lint-${GOLANGCI_LINT_VERSION}-linux-amd64.deb
        sudo dpkg -i /tmp/golangci-lint.deb

    - name: Run golangci-lint
      run: golangci-lint run

    - name: Install CockroachDB
      run: |
        sudo mkdir -p /usr/local/lib/cockroach
        cd /tmp
        wget -O /tmp/cockroach-v${COCKROACHDB_VERSION}.linux-amd64.tgz https://binaries.cockroachdb.com/cockroach-v${COCKROACHDB_VERSION}.linux-amd64.tgz
        tar -xf cockroach-v${COCKROACHDB_VERSION}.linux-amd64.tgz
        sudo mv cockroach-v${COCKROACHDB_VERSION}.linux-amd64/cockroach /usr/local/bin/cockroach
        sudo mv cockroach-v${COCKROACHDB_VERSION}.linux-amd64/lib/libgeos.so /usr/local/lib/cockroach
        sudo mv cockroach-v${COCKROACHDB_VERSION}.linux-amd64/lib/libgeos_c.so /usr/local/lib/cockroach

    - name: Setup sysctl
      run: |
        cat <<EOF | sudo tee -a /etc/sysctl.d/10-custom.conf
        vm.max_map_count=262144
        EOF
        sudo sysctl -p /etc/sysctl.d/10-custom.conf

    # - name: Start CockroachDB demo cluster
    #   run: |
    #     cockroach demo movr --insecure --http-port 8090 & disown -h

    - name: Start docker-compose stack
      run: |
        sudo docker compose -f docker/cockroach-demo/docker-compose.yaml up -d
        sudo docker compose -f docker/cockroach-demo/docker-compose.yaml ps

    - name: Waiting for elasticsearch to be up
      run: |
        export SYNKER_ELASTICSEARCH_URI="http://127.0.0.1:9200"

        attempt_counter=0
        max_attempts=10

        until $(curl --output /dev/null --silent --head --fail ${SYNKER_ELASTICSEARCH_URI}); do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi

            printf '.'
            attempt_counter=$(($attempt_counter+1))
            sleep 5
        done

    - name: Waiting for redpanda to be up
      run: |
        attempt_counter=0
        max_attempts=10

        until $(nc -vz localhost 19092 &> /dev/null); do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi

            printf '.'
            attempt_counter=$(($attempt_counter+1))
            sleep 5
        done

    # - name: Waiting for cockroach to be up
    #   run: |
    #     netstat -laptn |grep cockroach || echo -n "Not started"

    #     attempt_counter=0
    #     max_attempts=20

    #     until $(nc -vz localhost 26257 &> /dev/null); do
    #         if [ ${attempt_counter} -eq ${max_attempts} ];then
    #           echo "Max attempts reached"
    #           exit 1
    #         fi

    #         printf '.'
    #         attempt_counter=$(($attempt_counter+1))
    #         sleep 5
    #     done

    #     attempt_counter=0

    #     until $(curl --output /dev/null --silent --head --fail http://localhost:8090/#/overview/list); do
    #         if [ ${attempt_counter} -eq ${max_attempts} ];then
    #           echo "Max attempts reached"
    #           exit 1
    #         fi

    #         printf '.'
    #         attempt_counter=$(($attempt_counter+1))
    #         sleep 5
    #     done

    - name: Run unit testing
      run: |
        cockroach demo movr --insecure --http-port 8090 & disown -h
        attempt_counter=0
        max_attempts=20

        until $(nc -vz localhost 26257 &> /dev/null); do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi

            printf '.'
            attempt_counter=$(($attempt_counter+1))
            sleep 5
        done

        attempt_counter=0

        until $(curl --output /dev/null --silent --head --fail http://localhost:8090/#/overview/list); do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi

            printf '.'
            attempt_counter=$(($attempt_counter+1))
            sleep 5
        done

        export COCKROACH_HOST=$(netstat -latn |grep 26257 |grep LISTEN |awk '{print $4}' | head -1)
        export SYNKER_PG_URI="postgres://root:@${COCKROACH_HOST}/movr?sslmode=disable"
        export SYNKER_ELASTICSEARCH_URI="http://127.0.0.1:9200"
        export SYNKER_KAFKA_URI="localhost:19092"

        mkdir -p .coverage/global
        SYNKER_LOG_LEVEL=debug go test -v ./... -cover -args -test.gocoverdir=$PWD/.coverage/global

        mkdir -p .coverage/os_variables
        SYNKER_LOG_LEVEL=debug go test -v ./... -run TestMain_fail_api_os_variables -cover -args -test.gocoverdir=$PWD/.coverage/os_variables

    - name: Run test coverage
      run: |
        COVERAGE_DIR=$(find .coverage -type d |tail -n +2 | tr -s "\n" "," | sed 's#,$##g')
        go tool covdata textfmt -i=${COVERAGE_DIR} -o=$PWD/.coverage/coverage.out
        go tool cover -func=.coverage/coverage.out
